{"version":3,"sources":["UpdateQuote.js","App.js","reportWebVitals.js","index.js"],"names":["UpdateQuote","id","className","this","props","text","author","React","Component","App","state","quotesAll","handleClick","bind","generateRandomInt","Math","floor","random","length","getRandomQuote","setState","$","attr","updateBackground","hexValues","color","i","css","isLoaded","axios","get","then","response","data","generateQuote","catch","error","console","log","href","target","class","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAsBeA,G,6KAhBP,OACA,gCACI,sBAAKC,GAAG,OAAR,UACA,mBAAGC,UAAU,sBACZC,KAAKC,MAAMC,KACZ,mBAAGH,UAAU,0BAGb,sBAAKD,GAAG,SAAR,eACGE,KAAKC,MAAME,OAASH,KAAKC,MAAME,OAAS,oB,GAX7BC,IAAMC,YC2EjBC,G,wDAxEb,WAAYL,GAAQ,IAAD,8BACjB,cAAMA,IACDM,MAAQ,CACXL,KAAM,GACNC,OAAQ,GACRK,UAAW,IAEb,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAPF,E,4DAUjB,IAAIC,EAAoBC,KAAKC,MAC3BD,KAAKE,SAAWd,KAAKO,MAAMC,UAAUO,QAEnCC,EAAiBhB,KAAKO,MAAMC,UAAUG,GAC1CX,KAAKiB,SAAS,CACZf,KAAK,GAAD,OAAKc,EAAed,MACxBC,OAAQa,EAAeb,SAGzBe,IAAE,gBAAgBC,KAChB,OADF,sFAEiFH,EAAed,KAFhG,MAIAF,KAAKoB,qB,yCAQL,IALA,IAAMC,EAAY,CAChB,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAC3B,IAAK,IAAK,IAAK,IAAK,IAAK,KAEvBC,EAAQ,IACHC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,GAASD,EAAUT,KAAKC,MAAsB,GAAhBD,KAAKE,WAErCI,IAAE,QAAQM,IAAI,mBAAoBF,K,0CAEf,IAAD,OAClBtB,KAAKiB,SAAS,CAAEQ,UAAU,IAC1BC,IACGC,IAAI,+BACJC,MAAK,SAACC,GACL,EAAKZ,SAAS,CAAET,UAAWqB,EAASC,OACpC,EAAKC,mBAENC,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,Q,oCAIhCjC,KAAK+B,kB,+BAIL,OACE,sBAAKjC,GAAG,YAAR,UACE,cAAC,EAAD,CAAaI,KAAMF,KAAKO,MAAML,KAAMC,OAAQH,KAAKO,MAAMJ,SACvD,mBAAGiC,KAAK,uBACNC,OAAO,SACPvC,GAAG,cACHC,UAAU,mBAHZ,SAIE,mBAAGuC,MAAM,qBAGX,wBAAQxC,GAAG,YAAYC,UAAU,0BAC/BwC,QAASvC,KAAKS,YADhB,uC,GA/DUL,IAAMC,YCMTmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f5d972aa.chunk.js","sourcesContent":["import React from 'react';\r\nimport '@fortawesome/fontawesome-free/js/all.js';\r\n\r\n\r\nclass UpdateQuote extends React.Component {\r\n    render() {\r\n        return (\r\n        <div>\r\n            <div id=\"text\">\r\n            <i className=\"fas fa-quote-left\"></i>\r\n            {this.props.text}\r\n            <i className=\"fas fa-quote-right\"></i>\r\n            </div>\r\n\r\n            <div id=\"author\">\r\n            - {this.props.author ? this.props.author : \"Unknown\"}\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UpdateQuote;\r\n","import React from 'react';\nimport axios from 'axios';\nimport $ from 'jquery';\nimport UpdateQuote from './UpdateQuote';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"\",\n      author: \"\",\n      quotesAll: [],\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  generateQuote() {\n    let generateRandomInt = Math.floor(\n      Math.random() * this.state.quotesAll.length\n    );\n    let getRandomQuote = this.state.quotesAll[generateRandomInt];\n    this.setState({\n      text: `${getRandomQuote.text}`,\n      author: getRandomQuote.author,\n    });\n\n    $(\"#tweet-quote\").attr(\n      \"href\",\n      `https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=\"${getRandomQuote.text}\"`\n    );\n    this.updateBackground();\n  }\n  updateBackground() {\n    const hexValues = [\n      0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\n      \"A\", \"B\", \"C\", \"D\", \"E\", \"F\",];\n\n    let color = \"#\";\n    for (let i = 0; i < 6; i++) {\n      color += hexValues[Math.floor(Math.random() * 16)];\n    }\n    $(\"body\").css(\"background-color\", color);\n  }\n  componentDidMount() {\n    this.setState({ isLoaded: true });\n    axios\n      .get(\"https://type.fit/api/quotes\")\n      .then((response) => {\n        this.setState({ quotesAll: response.data });\n        this.generateQuote();\n      })\n      .catch((error) => console.log(error));\n  }\n\n  handleClick() {\n    this.generateQuote();\n  }\n\n  render() {\n    return (\n      <div id=\"quote-box\">\n        <UpdateQuote text={this.state.text} author={this.state.author} />\n        <a href=\"https://twitter.com/\"\n          target=\"_blank\"\n          id=\"tweet-quote\"\n          className=\"custom-btn tweet\">\n          <i class=\"fab fa-twitter\"></i>\n        </a>\n\n        <button id=\"new-quote\" className=\"custom-btn generate-btn\"\n          onClick={this.handleClick}>\n          Generate New Quote\n        </button>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}